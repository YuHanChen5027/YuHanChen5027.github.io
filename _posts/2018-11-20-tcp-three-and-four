---
layout: post
title:  "TCP/IP各层以及三次握手，四次挥手学习笔记"
author: "陈宇瀚"
date:   2018-11-20 17:07:20 +0800
header-img: "img/img-head/img-head-tcp.jpg"
categories: article
tags:
  - 网络通信
  - 学习笔记
  - TCP/IP
---
# TCP/IP 协议和 OSI 7层 参考模型
**TCP/IP**可以说是**OSI 7层 参考模型**的简化版，**TCP/IP**中将**OSI7层模型**中的**应用层**，**表示层**，**会话层**合为一个**应用层**
![image](/img/in_post/tcp_osi7.png)

**TCP/IP**协议分为四层有以下两种情况：
- 应用层 传输控制层 网络层 链路层 
- 传输控制层 网络层 链路层 物理层
或者五层
- 应用层 传输控制层 网络层 链路层 物理层
![image](/img/in_post/tcp_info.png)
每层的作用简单概括下就是
1. 应用层:直接为用户的应用进程提供服务。在因特网中的应用层协议很多，如支持万维网应用的**HTTP**协议，支持电子邮件的**SMTP**协议，支持文件传送的**FTP**协议等等。
2. 传输控制层：负责网络连接中的两各主机之间的数据传输。主要使用两种协议：**TCP**(传输控制协议)和**UDP**(用户数据包协议)
3. 网络层：处理在网络上流动的数据包。规定了通过怎样的路径（所谓的传输路线）到达另一主机，并把数据包传送给另一主机。再主机之间通过多台主机或者网络设备进行传输时，网络层所起的作用就是在众多的选项内选择一条传输路线。
4. 链路层：处理连接网络的硬件部分。包括控制操作系统，硬件的设备驱动，NIC(网络适配器，即网卡)，以及光钎等物理可见部分（还包括连接器等一切传输媒介）。
硬件上的范畴均在链路层的作用范围之内。
5.物理层：为设备之间的数据通信提供传输媒体及互连设备,为数据传输提供可靠的环境。
### TCP
TCP是面向连接的，可靠的传输协议，会采用采用三次握手确认建立一个连接
#### 三次握手
![image](/img/in_post/tcp_three.png)
1. 第一次握手：建立连接时，**客户端client**向**服务器server**发送一段TCP报文，其中:
- 标记位为**SYN**，表示“请求建立新连接”; 
- 序号为**seq**= i（i一般为1）；
- 随后客户端进入**SYN-SENT**阶段。
2. 第二次握手：**服务器server**接收到来自**客户端client**的TCP报文之后，结束**LISTEN**阶段。并返回一段TCP报文，其中： 
- 标志位为**SYN**和**ACK**，表示“确认客户端的报文**seq**序号有效，服务器能正常接收客户端发送的数据，并同意创建新连接”（即告诉客户端，服务器收到了你的数据）； 
- 序号为**seq**=y；
- 确认号为**ack**=i+1，表示收到客户端的序号**seq**并将其值加1作为自己确认号**ack**的值；随后服务器端进入**SYN-RCVD**阶段。
3. 第三次握手：**客户端client**接收到来自**服务器server**的确认收到数据的TCP报文之后，明确了从**客户端client**到**服务器server**的数据传输是正常的，结束**SYN-SENT**阶段。并返回最后一段TCP报文。其中：
- 标志位为**ACK**，表示“确认收到服务器端同意连接的信号”（即告诉服务器，我知道你收到我发的数据了）；
- 序号为**seq**=i+1，表示收到服务器端的确认号**ack**，并将其值作为自己的序号值；
- 确认号为**ack**=y+1，表示收到服务器端序号**seq**，并将其值加1作为自己的确认号Ack的值；
- 随后客户端进入**ESTABLISHED**阶段。

完成三次握手后就可以开始进行数据发送和交换了。
#### 四次挥手
![image](/img/in_post/tcp_four.png)
1. 第一次挥手：**客户端client**想要释放连接，向**服务器server**发送一段TCP报文，其中： - 标记位为**FIN**，表示“请求释放连接“；
- 序号为**seq**=m；
- 随后**客户端client**进入**FIN-WAIT-1**阶段，即半关闭阶段。并且停止在**客户端client**到**服务器server**方向上发送数据，但是**客户端client**仍然能接收从**服务器server**传输过来的数据。

2. 第二次挥手：**服务器server**接收到从**客户端client**发出的TCP报文之后，确认了**客户端client**想要释放连接，随后**服务器server**结束**ESTABLISHED**阶段，进入**CLOSE-WAIT**阶段（半关闭状态）并返回一段TCP报文，其中：
- 标记位为**ACK**，表示“接收到**客户端client**发送的释放连接的请求”；
- 序号为**seq**=n；；
- 确认号为**ack**=m+1，表示是在收到**客户端client**报文的基础上，将其序号**seq**值加1作为本段报文确认号**ack**的值；
- 随后**服务器server**开始准备释放与**客户端client**方向上的连接,**客户端client**收到从**服务器server**发出的TCP报文之后，确认了**服务器server**收到了**客户端client**发出的释放连接请求，随后客户端结束**FIN-WAIT-1**阶段，进入**FIN-WAIT-2**阶段。

3. 第三次挥手：**服务器server**再次向**客户端client**发出一段TCP报文，其中：
- 标记位为**FIN**，**ACK**，表示“已经准备好释放连接了”。注意：这里的**ACK**并不是确认收到**服务器server**报文的确认报文。
- 序号为**seq**=w；
- 确认号为**ack**=m+1；表示是在收到**客户端client**报文的基础上，将其序号**seq**值加1作为本段报文确认号**ack**的值。
- 随后**服务器server**结束**CLOSE-WAIT**阶段，进入**LAST-ACK**阶段。并且停止在**服务器server**到**客户端client**的方向上发送数据，但是**服务器server**仍然能够接收从**客户端client**传输过来的数据。

4. **客户端client**收到从**服务器server**发出的TCP报文，确认了**服务器server**已做好释放连接的准备，结束**FIN-WAIT-2**阶段，进入**TIME-WAIT**阶段，并向**服务器server**发送一段报文，其中：
- 标记位为**ACK**，表示“接收到**服务器server**准备好释放连接的信号”。
- 序号为**seq**=m+1；表示是在收到了**服务器server**报文的基础上，将其确认号**ack**值作为本段报文序号的值。
- 确认号为**ack**=w+1；表示是在收到了**服务器server**报文的基础上，将其序号**seq**值作为本段报文确认号的值。
- 随后客户端开始在**TIME-WAIT**阶段等待2MSL


**服务器server**收到从**客户端client**发出的TCP报文之后结束**LAST-ACK**阶段，进入**CLOSED**阶段。由此正式确认关闭**服务器server**到客户端方向上的连接。

**客户端client**等待完2MSL之后，结束**TIME-WAIT**阶段，进入**CLOSED**阶段，由此完成“四次挥手”。

**tcp**标志位，有6种标示：
- SYN(synchronous建立联机) 
- ACK(acknowledgement 确认) 
- PSH(push传送) 
- FIN(finish结束) 
- RST(reset重置) 
- URG(urgent紧急)
- seq(序号，占4个字节，范围[0,4284967296])

*socket:ip+port ip+port 每一个socket是独立且隔离的*
